import os
import sys

# ファームウェアのバージョン情報を取得
print("=== MicroPython ファームウェア情報 ===")
print(f"MicroPython バージョン: {os.uname().release}")
print(f"プラットフォーム: {os.uname().sysname}")
print(f"マシン情報: {os.uname().machine}")

# Pythonバージョン情報を取得
print("\n=== Python バージョン情報 ===")
print(f"Python バージョン: {sys.version}")


import gc

# メモリ使用状況を表示
print("メモリ使用状況:")
print("空きメモリ:", gc.mem_free(), "バイト")
print("合計メモリ:", gc.mem_alloc() + gc.mem_free(), "バイト")

# ガベージコレクションを実行
gc.collect()

# 再度メモリ使用状況を確認
print("ガベージコレクション後の空きメモリ:", gc.mem_free(), "バイト")

import gc

def check_memory(label):
    print(f"{label}:")
    print(f"  使用メモリ: {gc.mem_alloc()} バイト")
    print(f"  空きメモリ: {gc.mem_free()} バイト")
    gc.collect()

# 必要な箇所に挿入して確認
check_memory("Before read")

Sub ConvertDataFormat()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim inputData As String
    Dim outputData As String
    Dim parts() As String
    
    ' 対象のワークシートを設定
    Set ws = ThisWorkbook.Sheets(1) ' 1つ目のシートを対象としています
    
    ' A列の最終行を取得
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' データ変換処理
    For i = 1 To lastRow
        inputData = ws.Cells(i, 1).Value ' A列のデータを取得
        If inputData Like "Write * *" Then ' フォーマットに一致する場合
            ' 空白で分割
            parts = Split(inputData, " ")
            If UBound(parts) = 2 Then ' 要素数が3つ（"Write", x, y）の場合
                ' 指定形式に変換
                outputData = "writei2c(" & parts(1) & "," & parts(2) & ")"
                ws.Cells(i, 2).Value = outputData ' B列に出力
            End If
        End If
    Next i
    
    MsgBox "データの変換が完了しました！", vbInformation
End Sub

pdbを使ったブレークポイント設定
import pdb

for i in range(10):
    print(f"ループ中: {i}")
    if i == 5:
        pdb.set_trace()  # ここでデバッガが起動
    print("次のループへ")

n（次の行に進む）
c（次のブレークポイントまで進む）
q（デバッグを終了）


from machine import Pin
import time

# ボタンのGPIOピン (適宜変更)
BUTTON_PIN = 14

# フラグの初期値
flag = 0

# ボタンの設定 (内部プルアップ有効)
button = Pin(BUTTON_PIN, Pin.IN, Pin.PULL_UP)

# 前回のボタン状態
last_state = button.value()

print("Press the button to toggle the flag (0 ⇔ 1)")

while True:
    current_state = button.value()
    
    # ボタンが押された（立ち下がりエッジ）
    if last_state == 1 and current_state == 0:
        flag = 1 - flag  # フラグをトグル
        print(f"Button Pressed! Flag is now: {flag}")
    
    # 状態の更新
    last_state = current_state

    # チャタリング防止
    time.sleep(0.05)


Option Explicit

' FT260の制御用オブジェクト（適宜、ライブラリを参照設定してください）
Dim FT260 As Object

Sub ControlFT260()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Sheet1") ' シート名を適宜変更
    
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "B").End(xlUp).Row ' 最終行の取得
    
    Dim i As Long
    For i = 8 To lastRow ' 8行目から処理を開始（データ開始行）
        Dim deviceAddr As Integer
        Dim bank As Integer
        Dim regAddr As Integer
        Dim readBytes As Integer
        Dim writeData As String
        
        deviceAddr = ws.Cells(i, 2).Value ' B列：デバイスアドレス
        bank = ws.Cells(i, 3).Value       ' C列：Bank番号
        regAddr = ws.Cells(i, 4).Value    ' D列：レジスタアドレス
        readBytes = ws.Cells(i, 5).Value  ' E列：Readバイト数
        writeData = ws.Cells(i, 6).Value  ' F列：Writeデータ
        
        If readBytes > 0 Then
            ' Read処理
            Dim readResult As String
            readResult = ReadFromFT260(deviceAddr, bank, regAddr, readBytes)
            ws.Cells(i, 8).Value = readResult ' H列：Resultに格納
        End If
        
        If writeData <> "" Then
            ' Write処理
            WriteToFT260 deviceAddr, bank, regAddr, writeData
        End If
    Next i
End Sub

' FT260に対して読み込みを行う関数
Function ReadFromFT260(deviceAddr As Integer, bank As Integer, regAddr As Integer, readBytes As Integer) As String
    ' ここにFT260のI2C通信を使った読み込み処理を実装
    ' 例：仮の値を返す
    ReadFromFT260 = "0xAB 0xCD" ' 実際にはI2Cから取得した値を返す
End Function

スイッチスクリプト
from machine import Pin
import time

# GP4: 出力（常にHigh）
gp4 = Pin(4, Pin.OUT)
gp4.value(1)

# GP5: 入力（切替検出用）
gp5 = Pin(5, Pin.IN, Pin.PULL_DOWN)  # 安定化のため残すがなくても動作はする

# 最後に検出した状態を記録
previous_state = gp5.value()

def run_script_A():
    print("▶ スクリプトA 実行中")
    for i in range(3):
        print(f"A {i}")
        time.sleep(0.3)

def run_script_B():
    print("▶ スクリプトB 実行中")
    for i in range(3):
        print(f"B {i}")
        time.sleep(0.3)

while True:
    current_state = gp5.value()

    if current_state != previous_state:
        # 状態が変化したので実行
        if current_state == 1:
            run_script_A()
        else:
            run_script_B()
        previous_state = current_state  # 状態を更新

    time.sleep(0.01)  # CPU負荷軽減用の小休止



from machine import Pin
import time

# GPIO4をHigh出力に設定
pin_output = Pin(4, Pin.OUT)
pin_output.value(1)

# GPIO5を入力に設定（プルダウン抵抗あり）
pin_input = Pin(5, Pin.IN, Pin.PULL_DOWN)

# 現在の状態を保持
prev_state = pin_input.value()

# 状態に応じた処理
def script_A():
    print("スクリプトAを実行（GPIO5がHIGH）")

def script_B():
    print("スクリプトBを実行（GPIO5がLOW）")

# 初期状態に応じたスクリプト実行
if prev_state == 1:
    script_A()
else:
    script_B()

# 変化を監視して処理を切り替えるループ
while True:
    current_state = pin_input.value()
    if current_state != prev_state:
        print("スイッチが切り替わりました")
        if current_state == 1:
            script_A()
        else:
            script_B()
        prev_state = current_state
    time.sleep(0.05)  # チャタリング防止のために少し待つ






' FT260に対して書き込みを行うサブルーチン
Sub WriteToFT260(deviceAddr As Integer, bank As Integer, regAddr As Integer, writeData As String)
    ' ここにFT260のI2C通信を使った書き込み処理を実装
    ' 例：デバッグ用のメッセージを出力
    Debug.Print "Write to FT260: Device=" & deviceAddr & ", Bank=" & bank & ", Reg=" & regAddr & ", Data=" & writeData
End Sub




from machine import Pin
import time

# GPIO8を常にHigh出力に設定
pin_output = Pin(8, Pin.OUT)
pin_output.value(1)

# GPIO9を入力に設定（プルダウン抵抗あり）
pin_input = Pin(9, Pin.IN, Pin.PULL_DOWN)

# 初期状態の取得
prev_state = pin_input.value()

# 状態に応じた処理
def script_A():
    print("スクリプトAを実行（GPIO9がHIGH）")

def script_B():
    print("スクリプトBを実行（GPIO9がLOW）")

# 初期状態に応じたスクリプト実行
if prev_state == 1:
    script_A()
else:
    script_B()

# 状態を検知して処理を切り替えるループ
while True:
    current_state = pin_input.value()
    if current_state != prev_state:
        if current_state == 1:
            script_A()
        else:
            script_B()
        prev_state = current_state  # 状態更新（これが重要！）
    time.sleep(0.05)  # チャタリング防止



from machine import Pin
import time

# GPIO8を常にHigh出力に設定
pin_output = Pin(8, Pin.OUT)
pin_output.value(1)

# GPIO9を入力に設定（プルダウン抵抗あり）
pin_input = Pin(9, Pin.IN, Pin.PULL_DOWN)

# 処理ループA（GPIO9がHIGHのとき）
def script_A():
    print("スクリプトAを開始（GPIO9がHIGH）")
    while pin_input.value() == 1:
        print("A処理ループ中...")
        time.sleep(0.5)

# 処理ループB（GPIO9がLOWのとき）
def script_B():
    print("スクリプトBを開始（GPIO9がLOW）")
    while pin_input.value() == 0:
        print("B処理ループ中...")
        time.sleep(0.5)

# 初期状態に応じて起動
while True:
    current_state = pin_input.value()

    if current_state == 1:
        script_A()
    else:
        script_B()
        
    time.sleep(0.05)  # チャタリング防止
